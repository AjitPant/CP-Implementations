/*
─────────────────────
───────────████████──
──────────███▄███████
──────────███████████
──────────███████████
──────────██████─────
──────────█████████──
█───────███████──────
██────████████████───
███──██████████──█───
███████████████──────
███████████████──────
─█████████████───────
──███████████────────
────████████─────────
─────███──██─────────
─────██────█─────────
─────█─────█─────────
─────██────██────────
─────────────────────
*/
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>

#define int long long
#define read(a) int a; cin >> a;
#define readb(a, b) int a, b; cin >> a >> b;
#define readc(a, b, c) int a, b, c; cin >> a >> b >> c;
#define readarr(a, n) int a[(n) + 1] = {}; fori (i, 1, (n)) {cin >> a[i];}
#define readmat(a, n, m) int a[n + 1][m + 1] = {}; fori (i, 1, n) {fori (j, 1, m) cin >> a[i][j];}

#define print(a) cout << a << endl;
#define printarr(a, n) fori (i, 1, n) cout << a[i] << " "; cout << endl;
#define printv(v) for (int i: v) cout << i << " "; cout << endl;
#define printmat(a, n, m) fori (i, 1, n) {fori (j, 1, m) cout << a[i][j] << " "; cout << endl;} cout << endl;
#define all(v) v.begin(), v.end()
#define pb push_back
#define fi first
#define se second
#define rz resize
#define fori(i, a, b) for (int i = (a); i <= (b); i++)
#define ford(i, a, b) for (int i = (a); i >= (b); i--)
#define endl '\n'
 
using namespace std;
using namespace __gnu_pbds; 
 
typedef tree<long long,null_type,less<long long>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef vector<pair <int, int>> vpi;
typedef vector < vector <int> > vvi;
 
const int INF = 4e18;
const int mod = 1e9+7;

vvi adj(2e5), vec(2e5);
vi sz(2e5), color(2e5), cnt(2e5), ans(2e5), cnt_of(2e5);

void dfs_size(int v, int p = 0) 
{
	sz[v] = 1;
	for (auto u : adj[v]) 
	{
		if (u != p) 
		{
			dfs_size(u, v);
			sz[v] += sz[u];
		}
	}
}

void dfs(int v, int p = 0, bool keep = 1) 
{
	int Max = -1, bigchild = -1;

	for (auto u : adj[v]) 
	{
		if (u != p && Max < sz[u]) 
		{
			Max = sz[u];
			bigchild = u;
		}
	}

	for (auto u : adj[v])
		if (u != p && u != bigchild) dfs(u, v, 0);
		
	if (bigchild != -1) 
	{
		dfs(bigchild, v, 1);
		swap(vec[v], vec[bigchild]);
		cnt_of[v] = cnt_of[bigchild]; ans[v] = ans[bigchild];
	}

	vec[v].push_back(v);
	cnt[color[v]]++; 
	if(cnt_of[v] < cnt[color[v]]) {cnt_of[v] = cnt[color[v]]; ans[v] = color[v];}
	else if(cnt_of[v] == cnt[color[v]]) ans[v] += color[v];

	for (auto u : adj[v]) 
	{
		if (u != p && u != bigchild) 
		{
			for (auto x : vec[u]) 
			{
				cnt[color[x]]++;
				vec[v].push_back(x);

				if(cnt_of[v] < cnt[color[x]]) {cnt_of[v] = cnt[color[x]]; ans[v] = color[x];}
				else if(cnt_of[v] == cnt[color[x]]) ans[v] += color[x];
			}
		}
	}
	// there are cnt[c] vertex in subtree v color with c
	if (keep == 0) 
		for (auto u : vec[v]) cnt[color[u]]--;
} 
     
signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    #ifndef ONLINE_JUDGE 
        freopen ("INPUT.txt" , "r" , stdin);
        freopen ("OUTPUT.txt" , "w" , stdout);
        freopen ("OUTPUT_ERROR.txt" , "w" , stderr);
    #endif

    //start from here

	read(n);
	fori(i, 1, n) cin >> color[i];

	int a, b;
	fori(i, 1, n-1)
	{
		cin >> a >> b;
		adj[a].pb(b); adj[b].pb(a);
	}

	dfs_size(1);
	dfs(1);

	fori(i, 1, n) cout << ans[i] << " ";

    return 0;
}
