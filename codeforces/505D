/*
─────────────────────
───────────████████──
──────────███▄███████
──────────███████████
──────────███████████
──────────██████─────
──────────█████████──
█───────███████──────
██────████████████───
███──██████████──█───
███████████████──────
███████████████──────
─█████████████───────
──███████████────────
────████████─────────
─────███──██─────────
─────██────█─────────
─────█─────█─────────
─────██────██────────
─────────────────────
*/
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>

#define int long long
#define read(a) int a; cin >> a;
#define readb(a, b) int a, b; cin >> a >> b;
#define readc(a, b, c) int a, b, c; cin >> a >> b >> c;
#define reads(s) string s; cin >> s;
#define readarr(a, n) int a[(n) + 1] = {}; fori (i, 1, (n)) {cin >> a[i];}
#define readmat(a, n, m) int a[n + 1][m + 1] = {}; fori (i, 1, n) {fori (j, 1, m) cin >> a[i][j];}

#define print(a) cout << a << endl;
#define printarr(a, n) fori (i, 1, n) cout << a[i] << " "; cout << endl;
#define printv(v) for (int i: v) cout << i << " "; cout << endl;
#define printmat(a, n, m) fori (i, 1, n) {fori (j, 1, m) cout << a[i][j] << " "; cout << endl;}
#define all(v) v.begin(), v.end()
#define sz(s) (int)(s.size())
#define pb push_back
#define fi first
#define se second
#define rz resize
#define fori(i, a, b) for (int i = (a); i <= (b); i++)
#define ford(i, a, b) for (int i = (a); i >= (b); i--)
#define endl '\n'
#define setprec(x) cout << fixed << setprecision(x);
 
using namespace std;
using namespace __gnu_pbds; 
 
typedef tree<long long,null_type,less<long long>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef vector<pair <int, int>> vpi;
typedef vector < vector <int> > vvi;
 
const int INF = 4e18;
const int mod = 1e9+7; 

vvi adj; vi color;
int parent[1000000], size[1000000], cycle[1000000];

int find (int v) 
{
    if (v == parent[v])
        return v;
    return parent[v] = find(parent[v]);
}
 
void unite (int a, int b)
{
    a = find(a);
    b = find(b);
    if(a == b) return;
    if(size[a] < size[b]) swap(a, b);
    size[a] += size[b];
    parent[b] = a;

    if(cycle[b]) cycle[a] = 1;
}

void dfs(int cur)
{
    color[cur] = 1;
    for(int i : adj[cur])
    {
        if(color[i] == 0) dfs(i), unite(cur, i);
        else if(color[i] == 1) cycle[find(i)] = 1;
        else  unite(cur, i);
    }
    color[cur] = 2;
}
     
signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    #ifndef ONLINE_JUDGE 
        freopen ("INPUT.txt" , "r" , stdin);
        freopen ("OUTPUT.txt" , "w" , stdout);
        freopen ("OUTPUT_ERROR.txt" , "w" , stderr);
    #endif

    //start from here

    int n, m, x, y, ans = 0;
    cin >> n >> m;

    adj.rz(n+1); color.rz(n+1);

    fori (i, 1, n) parent[i] = i, size[i] = 1, cycle[i] = 0;

    fori(i, 1, m)
    {
        cin >> x >> y;
        adj[x].pb(y);
    }

    fori(i, 1, n)
    {
        if(color[i] == 0) dfs(i);
    }

    fori (i, 1, n)
    {
    	if(parent[i] == i && size[i] > 1)
    	{
    		if(cycle[i]) ans += size[i];
    		else ans += (size[i] - 1);
    	} 
    }

    print(ans);

    return 0;
}
